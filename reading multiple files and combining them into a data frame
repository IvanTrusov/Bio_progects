import pyfastx
import os
import multiprocessing
import pandas as pd
import time
start_time=time.time()

def read_gz(file_name,limit=0):
    id, quality, seq = [], [], []

    fastq_file = pyfastx.Fastq(file_name, build_index=False)

    if limit >= 1:
        n = 0
        for name, sequence, qual in fastq_file:
            id.append(name)
            seq.append(sequence)
            quality.append(qual)
            n += 1
            if n == limit:
                break
    else:
        for name, sequence, qual in fastq_file:
            id.append(name)
            seq.append(sequence)
            quality.append(qual)

    try:  # file integrity check
        df = pd.DataFrame({'id': id, 'Sequence': seq, 'Quality': quality})
    except:
        print('File ' + file + ' has been damaged')
    print("--- %s seconds ---" % (time.time() - start_time))
    return df

folder = r'New folder'
list_of_files = os.listdir(folder)
files = []
data_frame = pd.DataFrame({'id': [], 'seq': [], 'quality': []})

for file in list_of_files:
    file_name = folder + str('\\') + str(file)  # gererates path to file
    files.append(file_name)

if __name__ == '__main__':
    with multiprocessing.Pool(len(files)) as pool:
        print("--- %s seconds ---" % (time.time() - start_time))
        results = pool.map(read_gz, files)
        for i in results:
            data_frame = data_frame.append(i, ignore_index=True)
    print("--- %s seconds ---" % (time.time() - start_time))

