import pyfastx
import os
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from matplotlib.backends.backend_pdf import PdfPages

def plot_fastq_qualities_per_bases(grafic=True, limit=0):

    df = pd.DataFrame(columns=['Quality'])
    quality = []
    folder = r'New folder'
    list_of_files = os.listdir(folder)

    for file in list_of_files:
        file_name = folder + str('\\') + str(file)  # gererates path to file
        fastq_file = pyfastx.Fastq(file_name, build_index=False)

        if limit>=1:
            n = 0
            for name, sequence, qual in fastq_file:
                quality.append(qual)
                n+=1
                if n == limit:
                    break
        else:
            for name, sequence, qual in fastq_file:
                quality.append(qual)

        try: #file integrity check
            df = df.append(pd.DataFrame({'Quality': quality}))
        except:
            print('File '+ file + ' has been damaged')
            grafic = False

        quality.clear()
        
    if grafic == True:
        pp = PdfPages('plot_fastq_qualities_per_bases.pdf')  # creating a pdf file

        translate_data = pd.DataFrame(
            [int(ord(j) - 33) for j in i] for i in df['Quality'])  # decoding into ASCII_BASE=33
        l = len(translate_data.T) + 1

        sns.set(rc={'axes.facecolor': (0.9994925028835063, 0.9192618223760093, 0.6061361014994233),
                    'figure.facecolor': 'white'})

        mean = translate_data.mean()
        mean.index += 1

        translate_data.columns = [i for i in range(1, l)]
        translate_data.index += 1

        ax = sns.catplot(data=translate_data, kind='box', showfliers=False, color="blue")
        ax.fig.set_figheight(7)
        ax.fig.set_figwidth(12)

        sns.lineplot(data=mean, color='black')

        plt.xticks(np.arange(-1, l, 5))
        plt.yticks(np.arange(0, 42, 2))
        plt.xlabel('Position in read(bp)')
        plt.ylabel('Quality')
        plt.xlim((0, l))
        plt.ylim((0, 40))
        plt.title('Quality scores across all bases')

        plt.plot((np.arange(0, l)), [20 for i in (np.arange(0, l))], color="r", linewidth=2)
        plt.plot((np.arange(0, l)), [28 for i in (np.arange(0, l))], color="green", linewidth=2)

        pp.savefig()
        pp.close()
    return

plot_fastq_qualities(grafic=True, limit=100000)











