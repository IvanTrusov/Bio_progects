from collections import Counter
import seaborn as sns
from Support_Class import *
import matplotlib.pyplot as plt
import numpy as np


class statistical_analysis_multi():

    def __init__(self, path, mode):

        self.path = path
        self.mode = mode



    def Basic_Statistics(self):

        list_of_files = Support_class().get_list(self.path, self.mode)

        if list_of_files == None:
            return

        names = list()
        encoding_type = set()
        total_seq = 0
        length = set()
        gc = list()
        quality = set()

        for file in list_of_files:

            if self.mode == 'apart':

                try:
                    Support_class().B_S(file)
                    return os.remove(file + '.fxi')

                except:
                    return print('File ' + os.path.basename(file) + ' has been damaged')

            else:

                try:
                    name, ec, ts, l, GC, q = Support_class().B_S_2(file)
                    os.remove(file + '.fxi')

                    names.append(name)
                    encoding_type.update(encoding_type, ec)
                    total_seq += ts
                    length.update(length,l)
                    gc.append(GC)
                    quality.update(quality,q)

                except:
                    return print('File ' + os.path.basename(file) + ' has been damaged'), os.remove(file + '.fxi')

        if self.mode == 'join':

            df = pd.DataFrame([[names],
                               [list(encoding_type)],
                               [total_seq],
                               [max(length) if max(length) == min(length) else str(min(length)) + '-' + str(max(length))],
                               [int(sum(gc)/len(gc))],
                               [max(quality) if max(quality) == min(quality) else str(min(quality)) + '-' + str(max(quality))]],
                              ['File name(s)', 'Encoding format', 'Total Sequences', 'Sequence length', '%GC', 'Quality'])

            return print(df.to_string(header=False))



    def Overrepresented_sequences(self):

        list_of_files = Support_class().get_list(self.path, self.mode)

        if list_of_files == None:
            return

        sequences = []

        for file in list_of_files:
            fastq_file = pyfastx.Fastq(file, build_index=False)

            for name, seq, qul in fastq_file:
                sequences.append(seq)

            if self.mode == 'apart':
                overrep = Counter(sequences)
                df = pd.DataFrame({'Sequence': overrep.keys(), 'Count': overrep.values()})

                df = df.sort_values('Count', ascending=False)
                df.index = [''] * len(df)

                sequences.clear()

                print('\t', os.path.basename(file), '\n', df)

        if self.mode == 'join':
            overrep = Counter(sequences)
            df = pd.DataFrame({'Sequence': overrep.keys(), 'Count': overrep.values()})

            df = df.sort_values('Count', ascending=False)
            df.index = [''] * len(df)
            sequences.clear()

            print('\t', os.path.basename(self.path), '\n', df)



    def Base_content(self):

        list_of_files = Support_class().get_list(self.path, self.mode)

        if list_of_files == None:
            return

        sequences = []

        for file in list_of_files:
            fastq_file = pyfastx.Fastq(file, build_index=False)
            n = 0

            for name, sequence, qual in fastq_file:
                sequences.append(list(sequence))
                n += 1

                if n == 100000:
                    break

            if self.mode == 'apart':
                df = pd.DataFrame(sequences)
                df = df.T
                df = df.apply("".join, axis=1)
                sequences.clear()

                content = pd.DataFrame({'A': [int((i.count('A') / len(i)) * 100) for i in df],
                                        'C': [int((i.count('C') / len(i)) * 100) for i in df],
                                        'G': [int((i.count('G') / len(i)) * 100) for i in df],
                                        'T': [int((i.count('T') / len(i)) * 100) for i in df]})
                content.index += 1

                sns.set(rc={'axes.facecolor': 'black',
                            'figure.facecolor': 'white'})

                content.plot(kind='bar', stacked=True, figsize=(12, 5), rot=0, lw=0, color=['g', 'r', 'b', 'y']) \
                    .legend(bbox_to_anchor=(1, 1), facecolor='white')

                plt.yticks(np.arange(0, 110, 10))
                plt.xticks(range(-1, len(content['A']), 5))
                plt.xlabel('position in read(bp)')
                plt.ylabel('Procent')
                plt.title('Base content (' + os.path.basename(file) + ')')

                plt.show()

        if self.mode == 'join':
            df = pd.DataFrame(sequences)
            df = df.T
            df = df.apply("".join, axis=1)
            sequences.clear()

            content = pd.DataFrame({'A': [int((i.count('A') / len(i)) * 100) for i in df],
                                    'C': [int((i.count('C') / len(i)) * 100) for i in df],
                                    'G': [int((i.count('G') / len(i)) * 100) for i in df],
                                    'T': [int((i.count('T') / len(i)) * 100) for i in df]})
            content.index += 1

            sns.set(rc={'axes.facecolor': 'black',
                        'figure.facecolor': 'white'})

            content.plot(kind='bar', stacked=True, figsize=(12, 5), rot=0, lw=0, color=['g', 'r', 'b', 'y']) \
                .legend(bbox_to_anchor=(1, 1), facecolor='white')

            plt.yticks(np.arange(0, 110, 10))
            plt.xticks(range(-1, len(content['A']), 5))
            plt.xlabel('position in read(bp)')
            plt.ylabel('Procent')
            plt.title('Base content (' + os.path.basename(self.path) + ')')

            return plt.show()



    def GC_content(self):

        list_of_files = Support_class().get_list(self.path, self.mode)

        if list_of_files == None:
            return

        sequences = []

        for file in list_of_files:
            fastq_file = pyfastx.Fastq(file, build_index=False)
            n = 0

            for name, sequence, qual in fastq_file:
                sequences.append(sequence)
                n += 1
                if n == 100000:
                    break

            if self.mode == 'apart':
                f, ax = plt.subplots(figsize=(12, 5))

                gc = pd.DataFrame(((i.count('G') + i.count('C')) / len(i)) * 100 for i in sequences)
                sequences.clear()
                gc.hist(ax=ax, bins=150, color='red', grid=False, histtype='step', lw=6)

                ax.set_xlim((0, 100))
                plt.xticks(np.arange(0, 105, 5))

                plt.ylabel('Number of reads')
                plt.xlabel('Mean of GC content(%)')

                x = np.arange(1, 100, .1)
                f = [Support_class().normpdf(i, gc.mean(), gc.std()) for i in x]

                ax2 = ax.twinx()
                ax2.plot(x, f, label='Normal Distribution')
                ax2.set_ylim(0, max(f))
                ax2.axes.get_yaxis().set_ticks([])

                title = str('GC distribution over all sequences (' + os.path.basename(file) + ')')
                ax.set_title(title, size=15)

                plt.legend()

                plt.show()

        if self.mode == 'join':
            f, ax = plt.subplots(figsize=(12, 5))

            gc = pd.DataFrame(((i.count('G') + i.count('C')) / len(i)) * 100 for i in sequences)
            sequences.clear()
            gc.hist(ax=ax, bins=150, color='red', grid=False, histtype='step', lw=6)

            ax.set_xlim((0, 100))
            plt.xticks(np.arange(0, 105, 5))

            plt.ylabel('Number of reads')
            plt.xlabel('Mean of GC content(%)')

            x = np.arange(1, 100, .1)
            f = [Support_class().normpdf(i, gc.mean(), gc.std()) for i in x]

            ax2 = ax.twinx()
            ax2.plot(x, f, label='Normal Distribution')
            ax2.set_ylim(0, max(f))
            ax2.axes.get_yaxis().set_ticks([])

            title = str('GC distribution over all sequences (' + os.path.basename(self.path) + ')')
            ax.set_title(title, size=15)

            plt.legend()

            return plt.show()



    def Length_distribution(self):

        list_of_files = Support_class().get_list(self.path, self.mode)

        if list_of_files == None:
            return

        l = []

        for file in list_of_files:
            fastq_file = pyfastx.Fastq(file, build_index=False)

            for name, sequence, qual in fastq_file:
                if len(sequence)>0:
                    l.append(len(sequence))

            if self.mode == 'apart':
                df = pd.DataFrame({'Length': l})
                l.clear()

                sns.set(rc={'axes.facecolor': (0.9994925028835063, 0.9192618223760093, 0.6061361014994233),
                            'figure.facecolor': 'white'})

                ax = sns.displot(data=df, x='Length', color='blue')
                ax.fig.set_figheight(7)
                ax.fig.set_figwidth(12)

                if len(df['Length']) > 1:
                    plt.xticks(np.arange(1, df['Length'].max() + df['Length'].max() // 10, df['Length'].max() // 10))
                else:
                    plt.xticks(np.arange(df['Length'].min(), df['Length'].max() + 10, 10))

                plt.xlim(1, df['Length'].max() + 1)
                plt.xlabel('Length')
                plt.ylabel('Number of reads')
                plt.title('Length Distribution (' + os.path.basename(file) + ')')

                plt.show()

        if self.mode == 'join':
            df = pd.DataFrame({'Length': l})
            l.clear()

            sns.set(rc={'axes.facecolor': (0.9994925028835063, 0.9192618223760093, 0.6061361014994233),
                        'figure.facecolor': 'white'})

            ax = sns.displot(data=df, x='Length', color='blue')
            ax.fig.set_figheight(7)
            ax.fig.set_figwidth(12)

            if len(df['Length']) > 1:
                plt.xticks(np.arange(1, df['Length'].max() + df['Length'].max() // 10, df['Length'].max() // 10))
            else:
                plt.xticks(np.arange(df['Length'].min(), df['Length'].max() + 10, 10))

            plt.xlim(1, df['Length'].max() + 1)
            plt.xlabel('Length')
            plt.ylabel('Number of reads')
            plt.title('Length Distribution (' + os.path.basename(self.path) + ')')

            return plt.show()



    def Qualitie(self):

        list_of_files = Support_class().get_list(self.path, self.mode)

        if list_of_files == None:
            return

        quality = []

        for file in list_of_files:
            fastq_file = pyfastx.Fastq(file, build_index=False)

            for name, sequence, qual in fastq_file:
                    quality.append(qual)

            if self.mode == 'apart':
                translate_data = Counter([int(sum([ord(j) - 33 for j in i]) / len(i)) for i in quality])  # decoding into ASCII_BASE=33
                quality.clear()

                plt.figure(figsize=(12, 6))

                plt.bar(sorted(translate_data.keys()), [translate_data[i] for i in sorted(translate_data.keys())])

                plt.ylabel('Number of Reads')
                plt.xlabel('Quality')
                plt.title('Per sequence quality scores (' + os.path.basename(file) + ')')

                plt.show()

        if self.mode == 'join':
            translate_data = Counter([int(sum([ord(j) - 33 for j in i]) / len(i)) for i in quality])  # decoding into ASCII_BASE=33
            quality.clear()

            plt.figure(figsize=(12, 6))

            plt.bar(sorted(translate_data.keys()), [translate_data[i] for i in sorted(translate_data.keys())])

            plt.ylabel('Number of Reads')
            plt.xlabel('Quality')
            plt.title('Per sequence quality scores (' + os.path.basename(self.path) + ')')

            return plt.show()



    def Qualities_per_bases(self):

        list_of_files = Support_class().get_list(self.path, self.mode)

        if list_of_files == None:
            return

        quality = []

        for file in list_of_files:
            fastq_file = pyfastx.Fastq(file, build_index=False)
            n = 0

            for name, sequence, qual in fastq_file:
                quality.append(qual)
                n += 1
                if n == 100000:
                    break

            if self.mode == 'apart':
                translate_data = pd.DataFrame([int(ord(j) - 33) for j in i] for i in quality)  # decoding into ASCII_BASE=33
                quality.clear()

                l = len(translate_data.T) + 1

                sns.set(rc={'axes.facecolor': (0.9994925028835063, 0.9192618223760093, 0.6061361014994233),
                            'figure.facecolor': 'white'})

                mean = translate_data.mean()

                translate_data.columns = [i for i in range(1, l)]

                ax = sns.catplot(data=translate_data, kind='box', showfliers=False, color="blue")
                ax.fig.set_figheight(7)
                ax.fig.set_figwidth(12)

                sns.lineplot(data=mean, color='black')

                plt.xticks(np.arange(-1, l, 5))
                plt.yticks(np.arange(0, max(translate_data.max()), 2))
                plt.xlabel('Position in read(bp)')
                plt.ylabel('Quality')
                plt.xlim((0, l - 1))
                plt.ylim((0, max(translate_data.max())))
                plt.title('Quality scores across all bases (' + os.path.basename(self.path) + ')')

                plt.plot((np.arange(0, l)), [20 for i in (np.arange(0, l))], color="r", linewidth=2)
                plt.plot((np.arange(0, l)), [28 for i in (np.arange(0, l))], color="green", linewidth=2)

                plt.show()

        if self.mode == 'join':
            translate_data = pd.DataFrame([int(ord(j) - 33) for j in i] for i in quality)  # decoding into ASCII_BASE=33
            quality.clear()

            l = len(translate_data.T) + 1

            sns.set(rc={'axes.facecolor': (0.9994925028835063, 0.9192618223760093, 0.6061361014994233),
                        'figure.facecolor': 'white'})

            mean = translate_data.mean()

            translate_data.columns = [i for i in range(1, l)]

            ax = sns.catplot(data=translate_data, kind='box', showfliers=False, color="blue")
            ax.fig.set_figheight(7)
            ax.fig.set_figwidth(12)

            sns.lineplot(data=mean, color='black')

            plt.xticks(np.arange(-1, l, 5))
            plt.yticks(np.arange(0,max(translate_data.max()), 2))
            plt.xlabel('Position in read(bp)')
            plt.ylabel('Quality')
            plt.xlim((0, l - 1))
            plt.ylim((0, max(translate_data.max())))
            plt.title('Quality scores across all bases (' + os.path.basename(self.path) + ')')

            plt.plot((np.arange(0, l)), [20 for i in (np.arange(0, l))], color="r", linewidth=2)
            plt.plot((np.arange(0, l)), [28 for i in (np.arange(0, l))], color="green", linewidth=2)

            return plt.show()

test = statistical_analysis_multi('New folder', 'join')
#test.Qualities_per_bases()





